ttyoff : true; 
load ("nchrpl");

pinverse(n) :=
  block ([pm_retmat,pm_temp], 
	pm_retmat : zeromatrix(0,0),
	for i:1 thru (n+1)^2 do
	(	pm_temp : zeromatrix(n^2+2*n+1,1),
		if mod(i,n+1)=0 and i<n^2+n then
			pm_temp[n^2+i/(n+1),1] : 1
		else if i<n^2+n then
			pm_temp[i-floor(i/(n+1)),1] :1
		else 
			pm_temp[i,1] : 1,
		pm_retmat : addcol(pm_retmat, (pm_temp))
	),		
	return(pm_retmat)        
)$


seriesSolution(truncOrder, initVec, F_faug2, bita) :=
 block ([initVec_aug, summand, j, ret, S_lst],
	initVec_aug : addrow(initVec, [ksi]),
	summand : 0,
	ret : 0,
        S_lst : make_array(fixnum, truncOrder+1),
	for j:0 thru truncOrder do 
	(
	  if notequal(bita,0) then
	   summand:1/(j!)*(((1-exp(bita*t))/(-bita))^j)
	         *S(j,initVec_aug, F_faug2,S_lst)
                 .initVec_aug
	  else
	   summand:1/(j!)*t^j
	         *S(j,initVec_aug, F_faug2,S_lst)
                 .initVec_aug,	
	  ret:ret+summand
	),
	return(exp(bita*t)*ret)
)$


S(i,a,F,S_lst) :=
 block([], 
	if notequal(S_lst[i],0) then 
	 return(S_lst[i])
        else  
	 S_lst[i] : S_c(i,a,F,S_lst),
	return(S_lst[i])
)$

S_c(i,a,F,S_lst) :=
 block ([k, tot],
	if i = 0 then
          return(ident((matrix_size(a))[1])),
	  
        tot : zeromatrix((matrix_size(a))[1],(matrix_size(a))[1]),
        
	for k:0 thru i-1 do
	(
	  tot : tot + (i-1)!/((i-1-k)!*k!)
	      * squarify(F,S(k,a,F,S_lst).a)
	      . S(i-1-k,a,F,S_lst)
        ),
	return(tot)	
)$

squarify(sqF,sqa) :=
 block([n,sqres,sqi,sqtmp],
	n : (matrix_size(a))[1],
	sqres : 0,
	sqi : 1,
	for sqi:1 thru n do
	(
	 sqtmp : extractColRange(sqF, n*(sqi-1)+1, (n*(sqi-1)+n)),
	 sqres : sqres + sqa[sqi,1] * sqtmp 
	),  
	return(sqres)
)$

extractColRange(F, em, en) :=
 block([i, tmp],
	tmp : zeromatrix(0,0),
	for i:em thru en do
	(
		tmp : addcol(tmp,col(F,i))
	),
	return(tmp)
)$

F_org0 : matrix([0],[1]);
F_org1 : matrix([1,1],[1,0]);
F_org2 : matrix([0,1/2,1/2,0],[0,0,0,-1]);
initVec : matrix([0.1],[0.2]);
truncOrder : 7;

n : (matrix_size(initVec))[1];

bita : 2/(7*n+8)*mattrace(F_org1);

G12_2 : 1/(2*ksi) * F_org1 
      - 1/(7*n+8)*1/(2*ksi) * mattrace(F_org1)*ident(n);
G22_2 : zeromatrix(1, n);
F_faug2 : addcol(F_org2, 
		G12_2,
		1/ksi*F_org1-bita/ksi*ident(n)-G12_2,
		1/(ksi^2)*F_org0); 
F_faug2 : addrow(F_faug2, 
		addcol(zeromatrix(1,n^2+2*n),[-bita/ksi]));

F_faug2 : F_faug2 . (pinverse(n));

resVec : submatrix(n+1,seriesSolution(truncOrder, 
                  initVec, F_faug2, bita));

ttyoff : false;

for i:0 thru 10 do  
( print(float(i/10)),
 print(float(ev((resVec[1]), t=i/10))),
 print(float(ev((resVec[2]), t=i/10)))
);

quit();
